@page "/"
@inject HttpClient Http
 <div class="progress status-loader">
    @if (IsBusy == true)
    {

        <div class="progress-bar progress-bar-striped progress-bar-animated" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%">
            Loading joke!
        </div>
    }
</div>

<p>This component demonstrates fetching data from the server.</p>
<div class="btn-toolbar mb-3">
    <div class="input-group mr-2">
        <div class="input-group-prepend">
            <div class="input-group-text" id="btnGroupAddon">
                <span class="oi oi-fork" aria-hidden="true"></span>
            </div>
        </div>
        <select class="form-control" onchange="@categorySelected">
            <option value="">-- Select Category --</option>
            @foreach (var category in categories)
            {
                <option value="@category">@category</option>
            }
        </select>
    </div>
    <div class="btn-group @(@jokes.Count > 0 || @searchResults.total > 0 ? "mr-2" : "mr-auto")">
        <button class="btn btn-primary" onclick="@FetchJoke" disabled="@(IsBusy)">
            <span class="oi oi-plus" aria-hidden="true"></span> Fetch a Joke!
        </button>
    </div>
    @if(jokes.Count > 0 || searchResults.total > 0)
    {
        <div class="btn-group mr-auto">
            <button class="btn btn-outline-danger" onclick="@RemoveJokes" disabled="@(IsBusy)">
                <span class="oi oi-trash" aria-hidden="true"></span> Clear all
            </button>
        </div>
    }
    <div class="input-group">
        <input
            type="text"
            class="form-control"
            placeholder="Search for joke content!"
            aria-label="Search for joke content!"
            aria-describedby="basic-addon2"
            bind="@searchQuery" />
        <div class="input-group-append">
            <button
                class="input-group-text btn"
                id="basic-addon2"
                onclick="@getSearch">
                <span class="oi oi-magnifying-glass"></span>
            </button>
        </div>
    </div>
</div>


<div class="container-fluid">
    <div class="row increased">
        @foreach (var item in jokes)
        {
            <div class="card-wrap col-md-3 ">
                <div class="card animated zoomIn">
                    <div class="card-body">
                        <p class="card-text">
                            @item.value
                        </p>
                        <button
                            class="btn btn-outline-danger"
                            onclick=@(() => RemoveJoke(@item.fetchIndex))>
                            <span class="oi oi-x" aria-hidden="true"></span>
                        </button>
                    </div>
                </div>
            </div>
        }
        @if(searchResults.total > 0)
        {
            @foreach (var item in searchResults.result)
            {
                <div class="card-wrap col-md-3 ">
                    <div class="card animated zoomIn">
                        <div class="card-body">
                            <p class="card-text">
                                @item.value
                            </p>
                        </div>
                    </div>
                </div>
            }
        }

    </div>
</div>

@functions {
    ChuckJoke joke;
    IList<ChuckJoke> jokes = new List<ChuckJoke>();
    int index=0;
    bool IsBusy = false;
    IList<string> categories = new List<string>();
    string category;
    public string searchQuery { get; set; }
    SearchResults searchResults = new SearchResults();

    //Fetch random joke https://api.chucknorris.io/jokes/random

    protected async Task FetchJoke()
    {
        IsBusy = true;
        if(category != "")
        {
            joke = await Http.GetJsonAsync<ChuckJoke>("https://api.chucknorris.io/jokes/random?category="+ category);
        }
        else
        {
            joke = await Http.GetJsonAsync<ChuckJoke>("https://api.chucknorris.io/jokes/random");
        }
        if(searchResults.total > 0)
        {
            searchResults = new SearchResults();
        }
        joke.fetchIndex = index;
        index++;
        jokes.Add(joke);
        IsBusy = false;
        StateHasChanged();
    }

    //Fetch jokes categories https://api.chucknorris.io/jokes/categories

    protected override async Task OnInitAsync()
    {
        categories = await Http.GetJsonAsync<IList<string>>("https://api.chucknorris.io/jokes/categories");
    }

    void categorySelected(UIChangeEventArgs categoryEvent)
    {
        category = categoryEvent.Value.ToString();
    }

    void EmptyCurrentJoke()
    {
        joke = null;
    }

    public void RemoveJoke(int i)
    {
        var itemToRemove = jokes.Single(j => j.fetchIndex == i);
        jokes.Remove(itemToRemove);
    }

    public void RemoveJokes()
    {
        joke = null;
        jokes.Clear();
        searchResults = new SearchResults();
    }

    public async void getSearch()
    {
        IsBusy = true;
        jokes.Clear();
        Console.WriteLine("Let's search!");
        Console.WriteLine(@searchQuery);
        searchResults = await Http.GetJsonAsync<SearchResults>("https://api.chucknorris.io/jokes/search?query="+searchQuery);
        IsBusy = false;
        StateHasChanged();
    }

    class ChuckJoke
    {
        public string icon_url { get; set; }
        public string id { get; set; }
        public string url { get; set; }
        public string value { get; set; }
        public int fetchIndex { get; set; }
    }

    public class Result
    {
        public List<string> category { get; set; }
        public string icon_url { get; set; }
        public string id { get; set; }
        public string url { get; set; }
        public string value { get; set; }
    }

    public class SearchResults
    {
        public int total { get; set; }
        public List<Result> result { get; set; }
    }

}
