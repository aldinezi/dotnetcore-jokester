#pragma checksum "/home/aldin/Desktop/dotnetcoreapp/Pages/Jokes.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a70325fd7abfd0010fdf955eb323443d18fcc044"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace dotnetcoreapp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using dotnetcoreapp;
    using dotnetcoreapp.Shared;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/")]
    public class Jokes : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 100 "/home/aldin/Desktop/dotnetcoreapp/Pages/Jokes.cshtml"
            
    ChuckJoke joke;
    IList<ChuckJoke> jokes = new List<ChuckJoke>();
    int index=0;
    bool IsBusy = false;
    IList<string> categories = new List<string>();
    string category;
    public string searchQuery { get; set; }
    SearchResults searchResults = new SearchResults();

    //Fetch random joke https://api.chucknorris.io/jokes/random

    protected async Task FetchJoke()
    {
        IsBusy = true;
        if(category != "")
        {
            joke = await Http.GetJsonAsync<ChuckJoke>("https://api.chucknorris.io/jokes/random?category="+ category);
        }
        else
        {
            joke = await Http.GetJsonAsync<ChuckJoke>("https://api.chucknorris.io/jokes/random");
        }
        if(searchResults.total > 0)
        {
            searchResults = new SearchResults();
        }
        joke.fetchIndex = index;
        index++;
        jokes.Add(joke);
        IsBusy = false;
        StateHasChanged();
    }

    //Fetch jokes categories https://api.chucknorris.io/jokes/categories

    protected override async Task OnInitAsync()
    {
        categories = await Http.GetJsonAsync<IList<string>>("https://api.chucknorris.io/jokes/categories");
    }

    void categorySelected(UIChangeEventArgs categoryEvent)
    {
        category = categoryEvent.Value.ToString();
    }

    void EmptyCurrentJoke()
    {
        joke = null;
    }

    public void RemoveJoke(int i)
    {
        var itemToRemove = jokes.Single(j => j.fetchIndex == i);
        jokes.Remove(itemToRemove);
    }

    public void RemoveJokes()
    {
        joke = null;
        jokes.Clear();
        searchResults = new SearchResults();
    }

    public async void getSearch()
    {
        IsBusy = true;
        jokes.Clear();
        Console.WriteLine("Let's search!");
        Console.WriteLine(@searchQuery);
        searchResults = await Http.GetJsonAsync<SearchResults>("https://api.chucknorris.io/jokes/search?query="+searchQuery);
        IsBusy = false;
        StateHasChanged();
    }

    class ChuckJoke
    {
        public string icon_url { get; set; }
        public string id { get; set; }
        public string url { get; set; }
        public string value { get; set; }
        public int fetchIndex { get; set; }
    }

    public class Result
    {
        public List<string> category { get; set; }
        public string icon_url { get; set; }
        public string id { get; set; }
        public string url { get; set; }
        public string value { get; set; }
    }

    public class SearchResults
    {
        public int total { get; set; }
        public List<Result> result { get; set; }
    }


#line default
#line hidden
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
